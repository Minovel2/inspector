import { world } from "mojang-minecraft"
let over = world.getDimension(`overworld`);

var adminTag = "admin";
var prefix = "+";
const pageLines = 10;

try {
    over.runCommand(`scoreboard players test count overworldInsp *`);
} catch {
    over.runCommand(`scoreboard players set count overworldInsp 0`);
}

const scores = (player, objective) => parseInt(over.runCommand(`scoreboard players test "${player}" ${objective} * *`)?.statusMessage?.split(" ")[1] || 0);

/*let ct, pt=0;
world.events.tick.subscribe(({ currentTick }) => {
    ct = currentTick;
})
world.events.beforeItemUseOn.subscribe(ev => {
    if (ct != pt) {
    let p = ev.blockLocation;
    let x = Math.floor(p.x);
    let y = Math.floor(p.y);
    let z = Math.floor(p.z);
    showInsp(ev.source, [x,y,z]);
    }
    pt = ct;
})*/

world.events.beforeChat.subscribe(msg => {
    let data1 = msg.sender.hasTag(adminTag), spl = msg.message.split(" ");
    if (data1 && spl[0] == `${prefix}utc`) {
        msg.cancel = true;
        try {
            msg.sender.runCommand(`scoreboard players set @s UTC ${spl[1]}`);
        } catch {}
    }
    else if (spl[0] == `${prefix}insp` && data1) {
        msg.cancel = true;
        let message = msg.message.substring(spl[0].length - 1).match(/~-\d+|\d+|~\d*|-\d+|\^/g) ?? [];
        showInsp(msg.sender, message);
} else if (data1 && msg.message == `${prefix}inspReset`) {
       try {over.runCommand(`scoreboard players reset * overworldInsp`);
           over.runCommand(`scoreboard players reset * netherInsp`);
           over.runCommand(`scoreboard players reset * the_endInsp`);
       } catch{}
        msg.cancel = true;
        over.runCommand(`tellraw @a[tag=${adminTag}] {"rawtext":[{"text":"${msg.sender.name} cleared inspector"}]}`);
        over.runCommand(`scoreboard players set count overworldInsp 0`);
    }
})

world.events.blockBreak.subscribe((br) => {
    toInsp(br.brokenBlockPermutation.type.id, br.block.location, br.player.name, 0, br.player.dimension.id);
})
world.events.blockPlace.subscribe((pl) => {
    toInsp(pl.block.type.id, pl.block.location, pl.player.name, 1, pl.player.dimension.id);
})

function showInsp(sender,message) {
    try {
        if (message.length > 8) return;
        for (let i=0; i<message.length;i++)
        message[i] = `${message[i]}`;
        let pos, page, page1;
        if (message.includes(`^`) && message.length < 4) {
            page = message[1];
            page1 = message[2];
            let block = sender.getBlockFromViewVector();
            message[0] = `${Math.floor(block.x)}`;
            message[1] = `${Math.floor(block.y)}`;
            message[2] = `${Math.floor(block.z)}`;
            
        }
        else if (message.length < 3) {
            page = message[0];
            page1 = message[1];
            message[0] = "~";
            message[1] = "~";
            message[2] = "~";
        }
        else if (message.length > 6) {
            if (message.length == 8)
            page1 = message.pop();
            page = message.pop();
        }
        else if (message.length < 6) {
            page1 = message[4];
            page = message[3];
        }
        page = +page || 1;
        page1 = +page1 || page;
        if (page % 1 != 0 || page < 1) page = 1;
        if (page1 % 1 != 0 || page1 < 1) page1 = page;
        if (page1 < page) return;
        for (let i=0;i<message.length;i++) {
            if (i==0 || i==3)
            pos = "x";
            else if (i==1 || i==4)
            pos = "y";
            else if (i==2 || i==5)
            pos = "z";
            if (message[i]=="~")
            message[i] == "~0";
            if (message[i].charAt(0) == "~") {
                message[i] = +message[i].slice(1) + Math.floor(sender.location[pos]);
            } else message[i] = +message[i];
        }
        if (message.length < 6) {
            message[3] = message[0];
            message[4] = message[1];
            message[5] = message[2];
        }
        let obj = world.scoreboard.getObjective(`${sender.dimension.id.split(":")[1]}Insp`);
        let xMin = Math.min(message[0],message[3]);
        let yMin = Math.min(message[1],message[4]);
        let zMin = Math.min(message[2],message[5]);
        let xMax = message[0] + message[3] - xMin;
        let yMax = message[1] + message[4] - yMin;
        let zMax = message[2] + message[5] - zMin;
        let success = 0, utc;
        try {utc = world.scoreboard.getObjective(`UTC`)?.getScore(sender.scoreboard) || 0} catch {utc = 0};
        if (Math.abs(utc) > 24)
        utc = 0;
        let objNew = obj.getParticipants().sort(function (a, b) {
  if (obj.getScore(a) > obj.getScore(b)) {
    return -1;
  }
  if (obj.getScore(a) < obj.getScore(b)) {
    return 1;
  }
  return 0;
});

        for (let i of objNew) {
            try {
        let split = i.displayName.split(";");
        if (split.length < 5)
        continue;
        let num = split[3].split(" ");
        if (num[0] >= xMin && num[0] <= xMax && num[1] >= yMin && num[1] <= yMax && num[2] >= zMin && num[2] <= zMax) {
            success++;
            if (success <= page1 * pageLines && success > (page - 1) * pageLines) {
            let date = new Date(), d = split[0].split(":");
            date = new Date(date.getFullYear(), date.getMonth(),+d[0],+d[1] + utc,+d[2],+d[3]);
            let action;
            action = split[4] == 0 ? "broke" : "place";
            tell(sender,`[${date.getFullYear()}/${date.getMonth()}/${date.getDate()} ${date.getHours()}:${date.getMinutes()}] ${split[2]} ${action} ${split[1]} at ${split[3]}`);
            }
        }
            } catch{}
        }
        if (page != page1)
        page = `${page}-${page1}`;
        tell(sender,`page ${page} of ${Math.ceil(success / pageLines)}`);
} catch {}
}
function tell(pl, text) {
    pl.runCommand(`tellraw @s {"rawtext":[{"text":"${text}"}]}`);
}
function toInsp(itemName,loc,playerName,mode,dimension,score = scores("count","overworldInsp")) {
    try {
    let x = Math.floor(loc.x);
    let y = Math.floor(loc.y);
    let z = Math.floor(loc.z);
    let coord = `${x} ${y} ${z}`;
    if (itemName && coord && playerName) {
        let date = new Date();
        date = `${date.getDate()}:${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;
        over.runCommand(`scoreboard players set "${date};${itemName};${playerName};${coord};${mode}" ${dimension.split(":")[1]}Insp ${score}`);
        over.runCommand(`scoreboard players add count overworldInsp 1`);
        }
    } catch {}
}
